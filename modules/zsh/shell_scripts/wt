#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Switch between git worktrees with speed.

args=("$@")

# Escape forward slash
# arg=$(echo "${args[0]}" | sed 's/\//\\\//g')
_repo_prefix() { # generate repo prefixes
  local tokens
  m=$(git worktree list --porcelain | head -n1 | tail -c +10)
  cd "$m" || exit
  IFS='-' read -r -a tokens <<<"$(basename "$(git rev-parse --show-toplevel)")"
  for t in "${tokens[@]}"; do
    printf "%s" "${t:0:1}"
  done
}

_symlink() {
  if [[ -f .git ]]; then
    cp .git .gitbackup
    worktreedir="$(tail -c +9 .gitbackup)"
    ln -sfn "$worktreedir" .git
    mkdir -p "$worktreedir/info"
  fi
}
_unsymlink() {
  cd "$(git rev-parse --show-toplevel)" || exit
  if [[ -d .git ]]; then
    if grep worktree < <(readlink -f .git); then
      rm .git
      mv .gitbackup .git
    fi
  fi
}

help() { ## show this help message
  echo -e "wt provides a more robust worktree experience just for me"
  echo -e "Usage:"
  cat "$0" | rg '\(\) \{ ##' | sed -E 's/^/wt /g;s/\(\) \{ ## /:\n/g' | gxargs -d'\n' -n2 printf '  %-10s %s\n'
  echo -e "  wt <worktree-name>: search for worktree names and change to that directory."
  # echo -e "\twt list: list out all the git worktrees."
  # echo -e "\twt update: update to the latest release of worktree switcher."
  # echo -e "\twt version: show the CLI version."
  # echo -e "\twt help: shows this help message."
}

list() { ## list worktrees
  git worktree list
}

new() { ## create a new worktree
  if [ "${args[0]}" = "" ]; then
    help
    exit 1
  fi
  local branch prefix

  IFS="-" branch="$(sed -E 's/^([A-Za-z]{1,5}-[0-9]{1,5})-/\L\1_/g' <<<"$*")"
  prefix="$(_repo_prefix)"
  git worktree add "$HOME/stripe/kardia_$branch"
  git worktree move "$HOME/stripe/kardia_${branch}" "$HOME/stripe/${prefix}_$branch"
  cp .ignore "$HOME/stripe/${prefix}_$branch"
  cd "$HOME/stripe/${prefix}_$branch" || exit
  _symlink
  exec "$SHELL"
}

track() { ## track an existing branch
  if [ "${args[0]}" = "" ]; then
    help
    exit 1
  fi
  local branch prefix name

  branch="$1"
  prefix="$(_repo_prefix)"
  name="${prefix}_${branch//kardia_/}"
  git worktree add "$HOME/stripe/$name" "$branch"
  cd "$HOME/stripe/$name" || exit
  _symlink
  exec "$SHELL"
}

remove() { ## remove an existing worktree
  location=$(git worktree list | grep "$@" | awk '{print $1; exit;}')
  pushd "$location"
  parent=$(git worktree list --porcelain | head -n1 | tail -c +10)
  _unsymlink
  git worktree remove --force "$@"
  if ! popd; then
    cd "$parent" || exit
    exec "$SHELL"
  fi
}

master() { ## change to master worktree
  local m
  m=$(git worktree list --porcelain | head -n1 | tail -c +10)

  if [[ -n $m ]]; then
    echo Changing to master worktree at: "$m"
    cd "$m"
    exec "$SHELL"
  fi
}

if [ "${args[0]}" = "" ]; then
  help
  exit 0
fi

mapfile -t commands < <(declare -F | sed 's/declare -f //g')
is_cmd='false'
for cmd in "${commands[@]}"; do
  if [[ $cmd == "$1" ]]; then
    is_cmd='true'
    break
  fi
done

if [[ $is_cmd == "true" ]]; then
  "$@"
else
  match=$(git worktree list --porcelain | awk '/'"$1"'/ {print; exit}' | tail -c +10)
  cd "$match" || exit
  exec "$SHELL"
fi

# case "${args[0]}" in
# 	list | l | help | h | master | m)
# 		"$@"
# 		;;
# 	*)
# 		directory=$(git worktree list --porcelain | awk '/'"$arg"'/ {print; exit}' | grep -oP '(?<=worktree ).*')
# 		;;
# esac

# Change worktree based on user argument.
# change_worktree() {
# 	echo Changing to worktree at: "$directory"
# 	cd "$directory"
# 	# exec $SHELL
# }

# If directory variable is not empty then change worktree
# if [[ -n $directory ]]; then
# fi
# 	change_worktree
